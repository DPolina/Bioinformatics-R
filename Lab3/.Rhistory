build_de_bruijn_graph <- function(kmers) {
# Создаем уникальные вершины (префиксы и суффиксы)
nodes <- unique(c(substr(kmers, 1, k - 1), substr(kmers, 2, k)))
# Создаем пустой граф
gr <- graphNEL(nodes = nodes, edgemode = "directed")
# Добавляем ребра на основе префиксов и суффиксов
for (kmer in kmers) {
prefix <- substr(kmer, 1, k - 1)
suffix <- substr(kmer, 2, k)
gr <- addEdge(from = prefix, to = suffix, graph = gr)
}
return(gr)
}
graph <- build_de_bruijn_graph(kmers)
print(graph)
plot(graph)
# Шаг 2: Построение графа де Брюйна
build_de_bruijn_graph <- function(kmers) {
edges <- data.frame(from = character(), to = character(), stringsAsFactors = FALSE)
for (kmer in kmers) {
prefix <- substr(kmer, 1, nchar(kmer) - 1)
suffix <- substr(kmer, 2, nchar(kmer))
edges <- rbind(edges, data.frame(from = prefix, to = suffix, stringsAsFactors = FALSE))
}
return(edges)
}
graph <- build_de_bruijn_graph(kmers)
print(graph)
plot(graph)
library("igraph")
ibrary("igraph")
library(igraph)
graph <- build_de_bruijn_graph(kmers)
#print(graph)
plot(g, vertex.size = 30, vertex.label.cex = 0.8, edge.arrow.size = 0.5)
library(igraph)
# Создаем граф на основе ребер
g <- graph_from_data_frame(graph, directed = TRUE)
# Визуализация графа
plot(g, vertex.size = 30, vertex.label.cex = 0.8, edge.arrow.size = 0.5)
library(igraph)
# Создаем граф на основе ребер
g <- graph_from_data_frame(graph, directed = TRUE)
# Визуализация графа
plot(g, vertex.size = 30, vertex.label.cex = 0.8, edge.arrow.size = 0.5)
# Шаг 2: Построение графа де Брюйна
build_de_bruijn_graph <- function(kmers) {
# Создаем уникальные вершины (префиксы и суффиксы)
nodes <- unique(c(substr(kmers, 1, k - 1), substr(kmers, 2, k)))
# Создаем пустой граф
gr <- graphNEL(nodes = nodes, edgemode = "directed")
# Добавляем ребра на основе префиксов и суффиксов
for (kmer in kmers) {
prefix <- substr(kmer, 1, k - 1)
suffix <- substr(kmer, 2, k)
gr <- addEdge(from = prefix, to = suffix, graph = gr)
}
return(gr)
}
# Построение графа
graph <- build_de_bruijn_graph(kmers)
print(graph)
# Построение графа
graph <- build_de_bruijn_graph(kmers)
print(graph)
plot(graph)
# Нахождение Эйлерова пути
eulerian_path <- eulerian(graph)
# Нахождение Эйлерова пути
library(eulerian)
eulerian_path <- eulerian(graph)
print(eulerian_path)
assemble_genome <- function(path) {
genome <- path[1]
for (i in 2:length(path)) {
genome <- paste0(genome, substr(path[i], nchar(path[i]), nchar(path[i])))
}
return(genome)
}
genome <- assemble_genome(eulerian_path)
print(genome)
library("graph")
# paste: Объединяет строки в одну строку с заданным разделителем
# substr: Извлекает или заменяет подстроки в строках
# nchar: Возвращает количество символов в строке
# unique: Удаляет дубликаты из вектора или списка
# graphNEL: Создаёт пустой направленный или ненаправленный граф
# addEdge: Добавляет рёбра между вершинами в объекте graphNEL
# eulerian: Находит эйлеров путь (или цикл) в графе.
# Шаг 1. Разбиение ридов на k-меры
# Риды — это короткие фрагменты ДНК, которые получаются в результате секвенирования.
# Чтобы собрать длинную последовательность ДНК, риды разбиваются на k-меры —
# последовательности длиной k. Каждый k-мер состоит из префикса (первых k-1 символов)
# и суффикса (последних k-1 символов). Эти префиксы и суффиксы используются как вершины графа.
reads <- c("CTACCGTCT", "ACCGTCTGA", "CGCTACCGT", "GCTACCGTC", "GTCTGAAGA", "TACCGTCTG", "TCTGAAGAA")
k <- 7 # длина k-меров
# Для каждого рида извлекаются все возможные последовательности длиной k с помощью substr.
get_kmers <- function(reads, k) {
kmers <- c()
for (read in reads) {
for (i in 1:(nchar(read) - k + 1)) {
kmers <- c(kmers, substr(read, i, i + k - 1))
}
}
return(kmers)
}
kmers <- get_kmers(reads, k)
print(kmers)
# Шаг 2: Построение графа де Брюйна
# Граф де Брюйна — это ориентированный граф, где:
# - Вершины — это уникальные префиксы и суффиксы длиной k-1.
# - Ребра — это переходы от префикса k-мера к его суффиксу.
# Такой граф используется для сборки генома, так как он отражает перекрытие
# последовательностей. Эйлеров путь в этом графе (путь, проходящий через каждое
# ребро ровно один раз) представляет итоговую последовательность.
build_de_bruijn_graph <- function(kmers){
# Создаем уникальные вершины (префиксы и суффиксы)
prefix <- substr(kmers, 1, nchar(kmers) - 1)
suffix <- substr(kmers, 2, nchar(kmers))
nodes <- unique(c(prefix, suffix))
# Создаем пустой граф
gr <- graphNEL(nodes = nodes, edgemode = "directed")
# Добавляем ребра
for(kmer in kmers){
from <- substr(kmer, 1, nchar(kmer) - 1)
to <- substr(kmer, 2, nchar(kmer))
gr <- addEdge(graph = gr, from = from, to = to)
}
return(gr)
}
# Построение графа
graph <- build_de_bruijn_graph(kmers)
print(graph)
#plot(grph, 'circo')
plot(grph)
library("grph")
library("graph")
# paste: Объединяет строки в одну строку с заданным разделителем
# substr: Извлекает или заменяет подстроки в строках
# nchar: Возвращает количество символов в строке
# unique: Удаляет дубликаты из вектора или списка
# graphNEL: Создаёт пустой направленный или ненаправленный граф
# addEdge: Добавляет рёбра между вершинами в объекте graphNEL
# eulerian: Находит эйлеров путь (или цикл) в графе.
# Шаг 1. Разбиение ридов на k-меры
# Риды — это короткие фрагменты ДНК, которые получаются в результате секвенирования.
# Чтобы собрать длинную последовательность ДНК, риды разбиваются на k-меры —
# последовательности длиной k. Каждый k-мер состоит из префикса (первых k-1 символов)
# и суффикса (последних k-1 символов). Эти префиксы и суффиксы используются как вершины графа.
reads <- c("CTACCGTCT", "ACCGTCTGA", "CGCTACCGT", "GCTACCGTC", "GTCTGAAGA", "TACCGTCTG", "TCTGAAGAA")
k <- 7 # длина k-меров
# Для каждого рида извлекаются все возможные последовательности длиной k с помощью substr.
get_kmers <- function(reads, k) {
kmers <- c()
for (read in reads) {
for (i in 1:(nchar(read) - k + 1)) {
kmers <- c(kmers, substr(read, i, i + k - 1))
}
}
return(kmers)
}
kmers <- get_kmers(reads, k)
print(kmers)
# Шаг 2: Построение графа де Брюйна
# Граф де Брюйна — это ориентированный граф, где:
# - Вершины — это уникальные префиксы и суффиксы длиной k-1.
# - Ребра — это переходы от префикса k-мера к его суффиксу.
# Такой граф используется для сборки генома, так как он отражает перекрытие
# последовательностей. Эйлеров путь в этом графе (путь, проходящий через каждое
# ребро ровно один раз) представляет итоговую последовательность.
build_de_bruijn_graph <- function(kmers){
# Создаем уникальные вершины (префиксы и суффиксы)
prefix <- substr(kmers, 1, nchar(kmers) - 1)
suffix <- substr(kmers, 2, nchar(kmers))
nodes <- unique(c(prefix, suffix))
# Создаем пустой граф
gr <- graphNEL(nodes = nodes, edgemode = "directed")
# Добавляем ребра
for(kmer in kmers){
from <- substr(kmer, 1, nchar(kmer) - 1)
to <- substr(kmer, 2, nchar(kmer))
gr <- addEdge(graph = gr, from = from, to = to)
}
return(gr)
}
# Построение графа
graph <- build_de_bruijn_graph(kmers)
print(graph)
#plot(grph, 'circo')
plot(graph)
# Шаг 3: Нахождение Эйлерова пути
# Эйлеров путь — это путь, который проходит через каждое ребро графа ровно один раз.
library(eulerian)
eulerian_path <- eulerian(graph)
print(eulerian_path)
# Шаг 4: Сборка последовательности
# После нахождения Эйлерова пути восстанавливаем длинную последовательность ДНК. Для этого:
# - Берется первая вершина пути.
# - К ней добавляется последний символ каждой последующей вершины.
assemble_genome <- function(path) {
genome <- path[1]
for (i in 2:length(path)) {
genome <- paste0(genome, substr(path[i], nchar(path[i]), nchar(path[i])))
}
return(genome)
}
genome <- assemble_genome(eulerian_path)
print(genome)
library("graph")
# paste: Объединяет строки в одну строку с заданным разделителем
# substr: Извлекает или заменяет подстроки в строках
# nchar: Возвращает количество символов в строке
# unique: Удаляет дубликаты из вектора или списка
# graphNEL: Создаёт пустой направленный или ненаправленный граф
# addEdge: Добавляет рёбра между вершинами в объекте graphNEL
# eulerian: Находит эйлеров путь (или цикл) в графе.
# Шаг 1. Разбиение ридов на k-меры
# Риды — это короткие фрагменты ДНК, которые получаются в результате секвенирования.
# Чтобы собрать длинную последовательность ДНК, риды разбиваются на k-меры —
# последовательности длиной k. Каждый k-мер состоит из префикса (первых k-1 символов)
# и суффикса (последних k-1 символов). Эти префиксы и суффиксы используются как вершины графа.
reads <- c("CTACCGTCT", "ACCGTCTGA", "CGCTACCGT", "GCTACCGTC", "GTCTGAAGA", "TACCGTCTG", "TCTGAAGAA")
k <- 7 # длина k-меров
# Для каждого рида извлекаются все возможные последовательности длиной k с помощью substr.
get_kmers <- function(reads, k) {
kmers <- c()
for (read in reads) {
for (i in 1:(nchar(read) - k + 1)) {
kmers <- c(kmers, substr(read, i, i + k - 1))
}
}
return(kmers)
}
kmers <- get_kmers(reads, k)
print(unique(kmers))
# Шаг 2: Построение графа де Брюйна
# Граф де Брюйна — это ориентированный граф, где:
# - Вершины — это уникальные префиксы и суффиксы длиной k-1.
# - Ребра — это переходы от префикса k-мера к его суффиксу.
# Такой граф используется для сборки генома, так как он отражает перекрытие
# последовательностей. Эйлеров путь в этом графе (путь, проходящий через каждое
# ребро ровно один раз) представляет итоговую последовательность.
build_de_bruijn_graph <- function(kmers){
# Создаем уникальные вершины (префиксы и суффиксы)
prefix <- substr(kmers, 1, nchar(kmers) - 1)
suffix <- substr(kmers, 2, nchar(kmers))
nodes <- unique(c(prefix, suffix))
# Создаем пустой граф
gr <- graphNEL(nodes = nodes, edgemode = "directed")
# Добавляем ребра
for(kmer in kmers){
from <- substr(kmer, 1, nchar(kmer) - 1)
to <- substr(kmer, 2, nchar(kmer))
gr <- addEdge(graph = gr, from = from, to = to)
}
return(gr)
}
# Построение графа
graph <- build_de_bruijn_graph(kmers)
print(graph)
#plot(grph, 'circo')
plot(graph)
# Шаг 3: Нахождение Эйлерова пути
# Эйлеров путь — это путь, который проходит через каждое ребро графа ровно один раз.
library(eulerian)
eulerian_path <- eulerian(graph)
print(eulerian_path)
# Шаг 4: Сборка последовательности
# После нахождения Эйлерова пути восстанавливаем длинную последовательность ДНК. Для этого:
# - Берется первая вершина пути.
# - К ней добавляется последний символ каждой последующей вершины.
assemble_genome <- function(path) {
genome <- path[1]
for (i in 2:length(path)) {
genome <- paste0(genome, substr(path[i], nchar(path[i]), nchar(path[i])))
}
return(genome)
}
genome <- assemble_genome(eulerian_path)
print(genome)
library("graph")
# paste: Объединяет строки в одну строку с заданным разделителем
# substr: Извлекает или заменяет подстроки в строках
# nchar: Возвращает количество символов в строке
# unique: Удаляет дубликаты из вектора или списка
# graphNEL: Создаёт пустой направленный или ненаправленный граф
# addEdge: Добавляет рёбра между вершинами в объекте graphNEL
# eulerian: Находит эйлеров путь (или цикл) в графе.
# Шаг 1. Разбиение ридов на k-меры
# Риды — это короткие фрагменты ДНК, которые получаются в результате секвенирования.
# Чтобы собрать длинную последовательность ДНК, риды разбиваются на k-меры —
# последовательности длиной k. Каждый k-мер состоит из префикса (первых k-1 символов)
# и суффикса (последних k-1 символов). Эти префиксы и суффиксы используются как вершины графа.
reads <- c("CTACCGTCT", "ACCGTCTGA", "CGCTACCGT", "GCTACCGTC", "GTCTGAAGA", "TACCGTCTG", "TCTGAAGAA")
k <- 7 # длина k-меров
# Для каждого рида извлекаются все возможные последовательности длиной k с помощью substr.
get_kmers <- function(reads, k) {
kmers <- c()
for (read in reads) {
for (i in 1:(nchar(read) - k + 1)) {
kmers <- c(kmers, substr(read, i, i + k - 1))
}
}
return(kmers)
}
kmers <- unique(get_kmers(reads, k))
print(kmers)
# Шаг 2: Построение графа де Брюйна
# Граф де Брюйна — это ориентированный граф, где:
# - Вершины — это уникальные префиксы и суффиксы длиной k-1.
# - Ребра — это переходы от префикса k-мера к его суффиксу.
# Такой граф используется для сборки генома, так как он отражает перекрытие
# последовательностей. Эйлеров путь в этом графе (путь, проходящий через каждое
# ребро ровно один раз) представляет итоговую последовательность.
build_de_bruijn_graph <- function(kmers){
# Создаем уникальные вершины (префиксы и суффиксы)
prefix <- substr(kmers, 1, nchar(kmers) - 1)
suffix <- substr(kmers, 2, nchar(kmers))
nodes <- unique(c(prefix, suffix))
# Создаем пустой граф
gr <- graphNEL(nodes = nodes, edgemode = "directed")
# Добавляем ребра
for(kmer in kmers){
from <- substr(kmer, 1, nchar(kmer) - 1)
to <- substr(kmer, 2, nchar(kmer))
gr <- addEdge(graph = gr, from = from, to = to)
}
return(gr)
}
# Построение графа
graph <- build_de_bruijn_graph(kmers)
print(graph)
#plot(grph, 'circo')
plot(graph)
# Шаг 3: Нахождение Эйлерова пути
# Эйлеров путь — это путь, который проходит через каждое ребро графа ровно один раз.
library(eulerian)
eulerian_path <- eulerian(graph)
print(eulerian_path)
# Шаг 4: Сборка последовательности
# После нахождения Эйлерова пути восстанавливаем длинную последовательность ДНК. Для этого:
# - Берется первая вершина пути.
# - К ней добавляется последний символ каждой последующей вершины.
assemble_genome <- function(path) {
genome <- path[1]
for (i in 2:length(path)) {
genome <- paste0(genome, substr(path[i], nchar(path[i]), nchar(path[i])))
}
return(genome)
}
genome <- assemble_genome(eulerian_path)
print(genome)
library("graph")
# paste: Объединяет строки в одну строку с заданным разделителем
# substr: Извлекает или заменяет подстроки в строках
# nchar: Возвращает количество символов в строке
# unique: Удаляет дубликаты из вектора или списка
# graphNEL: Создаёт пустой направленный или ненаправленный граф
# addEdge: Добавляет рёбра между вершинами в объекте graphNEL
# eulerian: Находит эйлеров путь (или цикл) в графе.
# Шаг 1. Разбиение ридов на k-меры
# Риды — это короткие фрагменты ДНК, которые получаются в результате секвенирования.
# Чтобы собрать длинную последовательность ДНК, риды разбиваются на k-меры —
# последовательности длиной k. Каждый k-мер состоит из префикса (первых k-1 символов)
# и суффикса (последних k-1 символов). Эти префиксы и суффиксы используются как вершины графа.
reads <- c("CTACCGTCT", "ACCGTCTGA", "CGCTACCGT", "GCTACCGTC", "GTCTGAAGA", "TACCGTCTG", "TCTGAAGAA")
k <- 7 # длина k-меров
# Для каждого рида извлекаются все возможные последовательности длиной k с помощью substr.
get_kmers <- function(reads, k) {
kmers <- c()
for (read in reads) {
for (i in 1:(nchar(read) - k + 1)) {
kmers <- c(kmers, substr(read, i, i + k - 1))
}
}
return(kmers)
}
kmers <- get_kmers(reads, k)
print(kmers)
kmers <- unique(get_kmers(reads, k))
print(kmers)
# Шаг 2: Построение графа де Брюйна
# Граф де Брюйна — это ориентированный граф, где:
# - Вершины — это уникальные префиксы и суффиксы длиной k-1.
# - Ребра — это переходы от префикса k-мера к его суффиксу.
# Такой граф используется для сборки генома, так как он отражает перекрытие
# последовательностей. Эйлеров путь в этом графе (путь, проходящий через каждое
# ребро ровно один раз) представляет итоговую последовательность.
build_de_bruijn_graph <- function(kmers){
# Создаем уникальные вершины (префиксы и суффиксы)
prefix <- substr(kmers, 1, nchar(kmers) - 1)
suffix <- substr(kmers, 2, nchar(kmers))
nodes <- unique(c(prefix, suffix))
# Создаем пустой граф
gr <- graphNEL(nodes = nodes, edgemode = "directed")
# Добавляем ребра
for(kmer in kmers){
from <- substr(kmer, 1, nchar(kmer) - 1)
to <- substr(kmer, 2, nchar(kmer))
gr <- addEdge(graph = gr, from = from, to = to)
}
return(gr)
}
# Построение графа
graph <- build_de_bruijn_graph(kmers)
print(graph)
#plot(grph, 'circo')
plot(graph)
# Шаг 3: Нахождение Эйлерова пути
# Эйлеров путь — это путь, который проходит через каждое ребро графа ровно один раз.
library(eulerian)
eulerian_path <- eulerian(graph)
print(eulerian_path)
# Шаг 4: Сборка последовательности
# После нахождения Эйлерова пути восстанавливаем длинную последовательность ДНК. Для этого:
# - Берется первая вершина пути.
# - К ней добавляется последний символ каждой последующей вершины.
assemble_genome <- function(path) {
genome <- path[1]
for (i in 2:length(path)) {
genome <- paste0(genome, substr(path[i], nchar(path[i]), nchar(path[i])))
}
return(genome)
}
genome <- assemble_genome(eulerian_path)
print(genome)
# 1. Загрузка данных
data <- read.table("C:/Users/dapol/OneDrive/Документы/БГУ/Биоинформатика/Labs/Lab3/data2.txt", header = TRUE)
# 2. Нормировка данных
# Вычисление среднего значения и стандартного отклонения
means <- colMeans(data)
sds <- apply(data, 2, sd)
# Нормализация данных
data_norm <- scale(data)
# 3. Построение корреляционной матрицы
cor_matrix <- cor(data_norm)
# 4. Проверка значимости корреляционной матрицы
N <- nrow(data) # число наблюдений
K <- ncol(data) # число признаков
det_R <- det(cor_matrix) # Определитель корреляционной матрицы
chi_squared_stat <- -(N - 1 - (2 * K + 5) / 6) * log(det_R)
p_value <- 1 - pchisq(chi_squared_stat, df = K * (K - 1) / 2)
# Проверка гипотезы
if (p_value < 0.05) {
cat("Корреляционная матрица значимо отличается от единичной. Применение метода главных компонент целесообразно.\n")
} else {
cat("Корреляционная матрица не отличается от единичной. Метод главных компонент нецелесообразен.\n")
}
# 5. Метод главных компонент
eigen_result <- eigen(cor_matrix)
eigen_values <- eigen_result$values
eigen_vectors <- eigen_result$vectors
# Вычисление проекций объектов на главные компоненты
z_scores <- data_norm %*% eigen_vectors
# 6. Анализ результатов
# Проверка равенства сумм дисперсий
original_variance <- sum(apply(data, 2, var))
principal_variance <- sum(eigen_values)
cat("Сумма дисперсий исходных признаков:", original_variance, "\n")
cat("Сумма дисперсий главных компонент:", principal_variance, "\n")
# Определение относительной доли разброса для первых двух компонент
relative_variance <- eigen_values / sum(eigen_values)
cat("Доли дисперсий для первых двух главных компонент:", relative_variance[1:2], "\n")
# 7. Визуализация
plot(z_scores[, 1], z_scores[, 2],
xlab = "Первая главная компонента",
ylab = "Вторая главная компонента",
main = "Диаграмма рассеяния первых двух главных компонент")
grid()
# 1. Загрузка данных
data <- read.table("C:/Users/dapol/OneDrive/Документы/БГУ/Биоинформатика/Labs/Lab3/data2.txt", header = TRUE)
# 2. Нормировка данных
# Вычисление среднего значения и стандартного отклонения
means <- colMeans(data)
sds <- apply(data, 2, sd)
# Нормализация данных
data_norm <- scale(data)
# 3. Построение корреляционной матрицы
cor_matrix <- cor(data_norm)
# 4. Проверка значимости корреляционной матрицы
N <- nrow(data) # число наблюдений
K <- ncol(data) # число признаков
det_R <- det(cor_matrix) # Определитель корреляционной матрицы
chi_squared_stat <- -(N - 1 - (2 * K + 5) / 6) * log(det_R)
p_value <- 1 - pchisq(chi_squared_stat, df = K * (K - 1) / 2)
# Проверка гипотезы
if (p_value < 0.05) {
cat("Корреляционная матрица значимо отличается от единичной. Применение метода главных компонент целесообразно.\n")
} else {
cat("Корреляционная матрица не отличается от единичной. Метод главных компонент нецелесообразен.\n")
}
# 5. Метод главных компонент
eigen_result <- eigen(cor_matrix)
eigen_values <- eigen_result$values
eigen_vectors <- eigen_result$vectors
# Вычисление проекций объектов на главные компоненты
z_scores <- data_norm %*% eigen_vectors
# 6. Анализ результатов
# Проверка равенства сумм дисперсий
original_variance <- sum(apply(data, 2, var))
principal_variance <- sum(eigen_values)
cat("Сумма дисперсий исходных признаков:", original_variance, "\n")
cat("Сумма дисперсий главных компонент:", principal_variance, "\n")
# Определение относительной доли разброса для первых двух компонент
relative_variance <- eigen_values / sum(eigen_values)
cat("Доли дисперсий для первых двух главных компонент:", relative_variance[1:2], "\n")
# 7. Визуализация
plot(z_scores[, 1], z_scores[, 2],
xlab = "Первая главная компонента",
ylab = "Вторая главная компонента",
main = "Диаграмма рассеяния первых двух главных компонент")
grid()
