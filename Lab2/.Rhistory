pollutantmean <- function(directory, pollutant, id) {
values <- c()
for (i in id) {
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename)
values <- c(values, data[[pollutant]])
}
mean_value <- mean(values, na.rm = TRUE)
return(mean_value)
}
mean_level_nitrate <- pollutantmean("D:\\7 семестр\\Биоинформатика\\Labs\\specdata", "nitrate", 99:149)
# rm(list = ls())
help(dir)
help(getwd)
help(read.csv)
help(length)
help(as.character)
help(paste)
help(mean)
help(complete.cases)
help(cor)
help(data.frame)
pollutantmean <- function(directory, pollutant, id) {
values <- c()
for (i in id) {
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename)
values <- c(values, data[[pollutant]])
}
mean_value <- mean(values, na.rm = TRUE)
return(mean_value)
}
mean_level_nitrate <- pollutantmean("D:\\7 семестр\\Биоинформатика\\Labs\\specdata", "nitrate", 99:149)
# Вариант 2
directory <- "C:\\Users\\dapol\\OneDrive\\Документы\\БГУ\\Биоинформатика\\Labs\\Data\\Lab2\\specdata"
# Функция для вычисления среднего значения загрязнителя сульфатами или нитратами
# для заданного количества источников:
pollutantmean <- function(directory, pollutant, id) {
# directory – вектор типа character, указывающий путь к папке, содержащей  CSV файлы.
# pollutant – вектор типа character, указывающий имя загрязнителя ("sulfate" or "nitrate"), для которого необходимо вычислить среднее значение.
# id – вектор типа integer, идентификационные номера файлов данных.
values <- c() # Создаем пустой вектор для хранения значений загрязнителя
for (i in id) {
# Формируем имя файла
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename[id]) # Читаем данные из CSV-файла
values <- c(values, data[[pollutant]]) # Добавляем значения загрязнителя в вектор
}
mean_value <- mean(values, na.rm = TRUE) # Вычисляем среднее значение, игнорируя NA
return(mean_value) # Возвращаем среднее значение
}
# Вычисляем средний уровень сульфата для файлов с ID от 50 до 99
mean_level_sulfate <- pollutantmean(directory, "sulfate", 50:99)
# Вариант 2
directory <- "C:\\Users\\dapol\\OneDrive\\Документы\\БГУ\\Биоинформатика\\Labs\\Data\\Lab2\\specdata"
# Функция для вычисления среднего значения загрязнителя сульфатами или нитратами
# для заданного количества источников:
pollutantmean <- function(directory, pollutant, id) {
# directory – вектор типа character, указывающий путь к папке, содержащей  CSV файлы.
# pollutant – вектор типа character, указывающий имя загрязнителя ("sulfate" or "nitrate"), для которого необходимо вычислить среднее значение.
# id – вектор типа integer, идентификационные номера файлов данных.
values <- c() # Создаем пустой вектор для хранения значений загрязнителя
for (i in id) {
# Формируем имя файла
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename) # Читаем данные из CSV-файла
values <- c(values, data[[pollutant]]) # Добавляем значения загрязнителя в вектор
}
mean_value <- mean(values, na.rm = TRUE) # Вычисляем среднее значение, игнорируя NA
return(mean_value) # Возвращаем среднее значение
}
# Вычисляем средний уровень сульфата для файлов с ID от 50 до 99
mean_level_sulfate <- pollutantmean(directory, "sulfate", 50:99)
print(mean_level_sulfate) # Выводим средний уровень сульфата
# Функция для подсчета полных случаев в данных:
complete <- function(directory, id) {
# id – вектор типа integer, идентификационные номера файлов данных.
res <- data.frame(id = integer(), nobs = integer()) # Создаем пустой data frame для результатов
for (i in id) {
# Формируем имя файла с нулями для индексов
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename) # Читаем данные из CSV-файла
nobs <- sum(complete.cases(data)) # Подсчитываем количество полных случаев
res <- rbind(res, data.frame(id = i, nobs = nobs)) # Добавляем результаты в таблицу
}
return(res) # Возвращаем таблицу с результатами
}
# Подсчитываем полные случаи для файлов с определенными ID
result <- complete(directory, c(3, 5, 9, 11, 13))
print(result)
# Функция для вычисления коэффициента корреляции Пирсона между сульфатом и нитратом:
corr <- function(directory, threshold, method) {
# threshold – вектор типа numeric, содержащий пороговое значение, при превышении
# которого вычисляется коэффициент корреляции Пирсона между переменными "sulfate"
# или "nitrate" для каждого из источников данных.
corr_values <- c() # Создаем пустой вектор для хранения значений корреляции
files <- list.files(directory, full.names = TRUE) # Получаем список файлов в директории
for (file in files) {
data <- read.csv(file) # Читаем данные из файла
full_data <- data[complete.cases(data), ] # Оставляем только полные случаи
if (nrow(full_data) > threshold) { # Проверяем, превышает ли количество полных случаев порог
correlation <- cor(full_data$sulfate, full_data$nitrate, method = method) # Вычисляем корреляцию
corr_values <- c(corr_values, correlation) # Добавляем значение корреляции в вектор
}
}
return(corr_values) # Возвращаем вектор корреляций
}
# Вычисляем корреляции для файлов, где количество полных случаев превышает 950
corr_result <- corr(directory, threshold = 950, "pearson")
print(corr_result)
# Вариант 2
directory <- "C:\\Users\\dapol\\OneDrive\\Документы\\БГУ\\Биоинформатика\\Labs\\Data\\Lab2\\specdata"
# Функция для вычисления среднего значения загрязнителя сульфатами или нитратами
# для заданного количества источников:
pollutantmean <- function(directory, pollutant, id) {
# directory – вектор типа character, указывающий путь к папке, содержащей  CSV файлы.
# pollutant – вектор типа character, указывающий имя загрязнителя ("sulfate" or "nitrate"), для которого необходимо вычислить среднее значение.
# id – вектор типа integer, идентификационные номера файлов данных.
values <- c() # Создаем пустой вектор для хранения значений загрязнителя
for (i in id) {
# Формируем имя файла
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename) # Читаем данные из CSV-файла
values <- c(values, data[[pollutant]]) # Добавляем значения загрязнителя в вектор
}
mean_value <- mean(values, na.rm = TRUE) # Вычисляем среднее значение, игнорируя NA
return(mean_value) # Возвращаем среднее значение
}
# Вычисляем средний уровень сульфата для файлов с ID от 50 до 99
mean_level_sulfate <- pollutantmean(directory, "sulfate", 50:99)
print(mean_level_sulfate) # Выводим средний уровень сульфата
# Функция для подсчета полных случаев в данных:
complete <- function(directory, id) {
# id – вектор типа integer, идентификационные номера файлов данных.
res <- data.frame(id = integer(), nobs = integer()) # Создаем пустой data frame для результатов
for (i in id) {
# Формируем имя файла с нулями для индексов
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename) # Читаем данные из CSV-файла
nobs <- sum(complete.cases(data)) # Подсчитываем количество полных случаев
res <- rbind(res, data.frame(id = i, nobs = nobs)) # Добавляем результаты в таблицу
}
return(res) # Возвращаем таблицу с результатами
}
# Подсчитываем полные случаи для файлов с определенными ID
result <- complete(directory, c(3, 5, 9, 11, 13))
print(result)
# Функция для вычисления коэффициента корреляции Пирсона между сульфатом и нитратом:
corr <- function(directory, threshold, method) {
# threshold – вектор типа numeric, содержащий пороговое значение, при превышении
# которого вычисляется коэффициент корреляции Пирсона между переменными "sulfate"
# или "nitrate" для каждого из источников данных.
corr_values <- c() # Создаем пустой вектор для хранения значений корреляции
files <- list.files(directory, full.names = TRUE) # Получаем список файлов в директории
for (file in files) {
data <- read.csv(file) # Читаем данные из файла
full_data <- data[complete.cases(data), ] # Оставляем только полные случаи
if (nrow(full_data) > threshold) { # Проверяем, превышает ли количество полных случаев порог
correlation <- cor(full_data$sulfate, full_data$nitrate, method = method) # Вычисляем корреляцию
corr_values <- c(corr_values, correlation) # Добавляем значение корреляции в вектор
}
}
return(corr_values) # Возвращаем вектор корреляций
}
# Вычисляем корреляции для файлов, где количество полных случаев превышает 950
corr_result <- corr(directory, threshold = 950, "pearson")
print(corr_result)
library(ggplot2)
sulfate_values <- c(sulfate_values, data$sulfate)
library(ggplot2)
data <- read.csv(filename)
library(ggplot2)
data <- read.csv(filename)
library(ggplot2)
sulfate_values <- c(sulfate_values, data$sulfate)
library(ggplot2)
sulfate_values <- c(sulfate_values, data$sulfate)
sulfate_values <- c(sulfate_values, data$sulfate)
sulfate_values <- c(sulfate_values, data$sulfate)
plot_histograms <- function(directory, ids) {
sulfate_values <- c()  # Вектор для хранения значений сульфатов
nitrate_values <- c()  # Вектор для хранения значений нитратов
for (i in ids) {
# Формируем имя файла
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename)  # Читаем данные из файла
# Добавляем значения загрязнителей в векторы
sulfate_values <- c(sulfate_values, data$sulfate)
nitrate_values <- c(nitrate_values, data$nitrate)
}
# Создаем датафрейм для построения графика
df <- data.frame(
value = c(sulfate_values, nitrate_values),
type = factor(c(rep("Sulfate", length(sulfate_values)), rep("Nitrate", length(nitrate_values))))
)
# Построение гистограммы
ggplot(df, aes(x = value, fill = type)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 30) +
labs(title = "Гистограммы уровней загрязнителей", x = "Уровень загрязнения (мкг/см3)", y = "Частота") +
theme_minimal() +
scale_fill_manual(values = c("Sulfate" = "blue", "Nitrate" = "red"))
}
# Вызов функции для построения гистограмм
plot_histograms("C:\\Users\\dapol\\OneDrive\\Документы\\БГУ\\Биоинформатика\\Labs\\Data\\Lab2\\specdata", c(3, 5, 9, 11, 13))
plot_histograms <- function(directory, ids) {
sulfate_values <- c()
nitrate_values <- c()
for (i in ids) {
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename)
sulfate_values <- c(sulfate_values, data$sulfate)
nitrate_values <- c(nitrate_values, data$nitrate)
}
df <- data.frame(
value = c(sulfate_values, nitrate_values),
type = factor(c(rep("Sulfate", length(sulfate_values)), rep("Nitrate", length(nitrate_values))))
)
# Построение гистограммы
ggplot(df, aes(x = value, fill = type)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 30) +
labs(title = "Гистограммы уровней загрязнителей", x = "Уровень загрязнения", y = "Частота") +
theme_minimal() +
scale_fill_manual(values = c("Sulfate" = "blue", "Nitrate" = "red"))
}
plot_histograms(directory, c(3, 5, 9, 11, 13))
help(ggplot)
plot_histograms <- function(directory, ids) {
sulfate_values <- c()
nitrate_values <- c()
for (i in ids) {
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename)
sulfate_values <- c(sulfate_values, data$sulfate)
nitrate_values <- c(nitrate_values, data$nitrate)
}
df <- data.frame(
value = c(sulfate_values, nitrate_values),
type = factor(c(rep("Sulfate", length(sulfate_values)), rep("Nitrate", length(nitrate_values))))
)
# Построение гистограммы
ggplot(df, aes(x = value, fill = type)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 30) +
labs(title = "Гистограммы уровней загрязнителей", x = "Уровень загрязнения", y = "Частота") +
theme_minimal() +
scale_fill_manual(values = c("Sulfate" = "blue", "Nitrate" = "red"))
}
plot_histograms(directory, c(3, 5, 9, 11, 13))
library(ggplot2)
plot_histograms <- function(directory, ids) {
data_list <- list()
for (i in ids) {
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename)
data$file_id <- as.factor(i)
data_list[[as.character(i)]] <- data
}
all_data <- do.call(rbind, data_list)
# Построение гистограммы
ggplot(all_data, aes(x = sulfate, fill = file_id)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 30) +
labs(title = "Гистограммы уровней сульфатов для каждого файла", x = "Уровень загрязнения сульфатами", y = "Частота") +
theme_minimal() +
scale_fill_manual(values = rainbow(lendth(ids)))
}
plot_histograms(directory, c(3, 5, 9, 11, 13))
library(ggplot2)
plot_histograms <- function(directory, ids) {
data_list <- list()
for (i in ids) {
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename)
data$file_id <- as.factor(i)
data_list[[as.character(i)]] <- data
}
all_data <- do.call(rbind, data_list)
# Построение гистограммы
ggplot(all_data, aes(x = sulfate, fill = file_id)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 30) +
labs(title = "Гистограммы уровней сульфатов для каждого файла", x = "Уровень загрязнения сульфатами", y = "Частота") +
theme_minimal() +
scale_fill_manual(values = rainbow(length(ids)))
}
plot_histograms(directory, c(3, 5, 9, 11, 13))
library(ggplot2)
plot_histograms <- function(directory, ids) {
data_list <- list()
for (i in ids) {
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename)
data$file_id <- as.factor(i)
data_list[[as.character(i)]] <- data
}
all_data <- do.call(rbind, data_list)
# Построение гистограммы
ggplot(all_data, aes(x = sulfate, fill = file_id)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 30) +
labs(title = "Гистограммы уровней сульфатов для каждого файла", x = "Уровень загрязнения сульфатами", y = "Частота") +
theme_minimal() +
#scale_fill_manual(values = rainbow(length(ids)))
scale_fill_manual(values = c("orange", "yellow", "lightgreen", "lightblue", "lightpink"))
}
plot_histograms(directory, c(3, 5, 9, 11, 13))
library(ggplot2)
plot_histograms <- function(directory, ids) {
data_list <- list()
for (i in ids) {
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename)
data$file_id <- as.factor(i)
data_list[[as.character(i)]] <- data
}
all_data <- do.call(rbind, data_list)
# Построение гистограммы
ggplot(all_data, aes(x = sulfate, fill = file_id)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 30) +
labs(title = "Гистограммы уровней сульфатов для каждого файла", x = "Уровень загрязнения сульфатами", y = "Частота") +
theme_minimal() +
#scale_fill_manual(values = rainbow(length(ids)))
scale_fill_manual(values = c("orange", "yellow", "lightgreen", "lightblue", "red"))
}
plot_histograms(directory, c(3, 5, 9, 11, 13))
library(ggplot2)
plot_histograms <- function(directory, ids) {
data_list <- list()
for (i in ids) {
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename)
data$file_id <- as.factor(i)
data_list[[as.character(i)]] <- data
}
all_data <- do.call(rbind, data_list)
# Построение гистограммы
ggplot(all_data, aes(x = sulfate, fill = file_id)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 30) +
labs(title = "Гистограммы уровней сульфатов для каждого файла", x = "Уровень загрязнения сульфатами", y = "Частота") +
theme_minimal() +
#scale_fill_manual(values = rainbow(length(ids)))
scale_fill_manual(values = c("red", "yellow", "lightgreen", "lightblue", "orange"))
}
plot_histograms(directory, c(3, 5, 9, 11, 13))
library(ggplot2)
plot_histograms <- function(directory, ids) {
data_list <- list()
for (i in ids) {
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename)
data$file_id <- as.factor(i)
data_list[[as.character(i)]] <- data
}
all_data <- do.call(rbind, data_list)
# Построение гистограммы
ggplot(all_data, aes(x = sulfate, fill = file_id)) +
geom_histogram(position = "identity", alpha = 0.3, bins = 30) +
labs(title = "Гистограммы уровней сульфатов для каждого файла", x = "Уровень загрязнения сульфатами", y = "Частота") +
theme_minimal() +
#scale_fill_manual(values = rainbow(length(ids)))
scale_fill_manual(values = c("red", "yellow", "lightgreen", "lightblue", "orange"))
}
plot_histograms(directory, c(3, 5, 9, 11, 13))
library(ggplot2)
plot_histograms <- function(directory, ids) {
data_list <- list()
for (i in ids) {
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename)
data$file_id <- as.factor(i)
data_list[[as.character(i)]] <- data
}
all_data <- do.call(rbind, data_list)
# Построение гистограммы
ggplot(all_data, aes(x = sulfate, fill = file_id)) +
geom_histogram(position = "identity", alpha = 0.3, bins = 30) +
labs(title = "Гистограммы уровней сульфатов для каждого файла", x = "Уровень загрязнения сульфатами", y = "Частота") +
theme_minimal() +
#scale_fill_manual(values = rainbow(length(ids)))
scale_fill_manual(values = c("orange", "yellow", "lightgreen", "lightblue", "lightpink"))
}
plot_histograms(directory, c(3, 5, 9, 11, 13))
library(ggplot2)
plot_histograms <- function(directory, ids) {
data_list <- list()
for (i in ids) {
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename)
data$file_id <- as.factor(i)
data_list[[as.character(i)]] <- data
}
all_data <- do.call(rbind, data_list)
# Построение гистограммы
ggplot(all_data, aes(x = sulfate, fill = file_id)) +
geom_histogram(position = "identity", alpha = 0.4, bins = 30) +
labs(title = "Гистограммы уровней сульфатов для каждого файла", x = "Уровень загрязнения сульфатами", y = "Частота") +
theme_minimal() +
#scale_fill_manual(values = rainbow(length(ids)))
scale_fill_manual(values = c("orange", "yellow", "lightgreen", "lightblue", "lightpink"))
}
plot_histograms(directory, c(3, 5, 9, 11, 13))
library(ggplot2)
plot_histograms <- function(directory, ids) {
data_list <- list()
for (i in ids) {
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename)
data$file_id <- as.factor(i)
data_list[[as.character(i)]] <- data
}
all_data <- do.call(rbind, data_list)
# Построение гистограммы
ggplot(all_data, aes(x = sulfate, fill = file_id)) +
geom_histogram(position = "identity", alpha = 0.4, bins = 30) +
labs(title = "Гистограммы уровней сульфатов для каждого файла", x = "Уровень загрязнения сульфатами", y = "Частота") +
theme_minimal() +
scale_fill_manual(values = rainbow(length(ids)))
#scale_fill_manual(values = c("orange", "yellow", "lightgreen", "lightblue", "lightpink"))
}
plot_histograms(directory, c(3, 5, 9, 11, 13))
library(ggplot2)
plot_histograms <- function(directory, ids) {
data_list <- list()
for (i in ids) {
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename)
data$file_id <- as.factor(i)
data_list[[as.character(i)]] <- data
}
all_data <- do.call(rbind, data_list)
# Построение гистограммы
ggplot(all_data, aes(x = sulfate, fill = file_id)) +
geom_histogram(position = "identity", alpha = 0.4, bins = 50) +
labs(title = "Гистограммы уровней сульфатов для каждого файла", x = "Уровень загрязнения сульфатами", y = "Частота") +
theme_minimal() +
scale_fill_manual(values = rainbow(length(ids)))
#scale_fill_manual(values = c("orange", "yellow", "lightgreen", "lightblue", "lightpink"))
}
plot_histograms(directory, c(3, 5, 9, 11, 13))
# Вариант 2
directory <- "C:\\Users\\dapol\\OneDrive\\Документы\\БГУ\\Биоинформатика\\Labs\\Data\\Lab2\\specdata"
# Функция для вычисления среднего значения загрязнителя сульфатами или нитратами
# для заданного количества источников:
pollutantmean <- function(directory, pollutant, id) {
# directory – вектор типа character, указывающий путь к папке, содержащей  CSV файлы.
# pollutant – вектор типа character, указывающий имя загрязнителя ("sulfate" or "nitrate"), для которого необходимо вычислить среднее значение.
# id – вектор типа integer, идентификационные номера файлов данных.
values <- c() # Создаем пустой вектор для хранения значений загрязнителя
for (i in id) {
# Формируем имя файла
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename) # Читаем данные из CSV-файла
values <- c(values, data[[pollutant]]) # Добавляем значения загрязнителя в вектор
}
mean_value <- mean(values, na.rm = TRUE) # Вычисляем среднее значение, игнорируя NA
return(mean_value) # Возвращаем среднее значение
}
# Вычисляем средний уровень сульфата для файлов с ID от 50 до 99
mean_level_sulfate <- pollutantmean(directory, "sulfate", 50:99)
+
print(mean_level_sulfate) # Выводим средний уровень сульфата
# Функция для подсчета полных случаев в данных:
complete <- function(directory, id) {
# id – вектор типа integer, идентификационные номера файлов данных.
res <- data.frame(id = integer(), nobs = integer()) # Создаем пустой data frame для результатов
for (i in id) {
# Формируем имя файла с нулями для индексов
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename) # Читаем данные из CSV-файла
nobs <- sum(complete.cases(data)) # Подсчитываем количество полных случаев
res <- rbind(res, data.frame(id = i, nobs = nobs)) # Добавляем результаты в таблицу
}
return(res) # Возвращаем таблицу с результатами
}
# Подсчитываем полные случаи для файлов с определенными ID
result <- complete(directory, c(3, 5, 9, 11, 13))
print(result)
# Функция для вычисления коэффициента корреляции Пирсона между сульфатом и нитратом:
corr <- function(directory, threshold, method) {
# threshold – вектор типа numeric, содержащий пороговое значение, при превышении
# которого вычисляется коэффициент корреляции Пирсона между переменными "sulfate"
# или "nitrate" для каждого из источников данных.
corr_values <- c() # Создаем пустой вектор для хранения значений корреляции
files <- list.files(directory, full.names = TRUE) # Получаем список файлов в директории
for (file in files) {
data <- read.csv(file) # Читаем данные из файла
full_data <- data[complete.cases(data), ] # Оставляем только полные случаи
if (nrow(full_data) > threshold) { # Проверяем, превышает ли количество полных случаев порог
correlation <- cor(full_data$sulfate, full_data$nitrate, method = method) # Вычисляем корреляцию
corr_values <- c(corr_values, correlation) # Добавляем значение корреляции в вектор
}
}
return(corr_values) # Возвращаем вектор корреляций
}
# Вычисляем корреляции для файлов, где количество полных случаев превышает 950
corr_result <- corr(directory, threshold = 950, "pearson")
print(corr_result)
library(ggplot2)
plot_histograms <- function(directory, ids) {
data_list <- list()
for (i in ids) {
filename <- paste(directory, "/", sprintf("%03d", i), ".csv", sep = "")
data <- read.csv(filename)
data$file_id <- as.factor(i)
data_list[[as.character(i)]] <- data
}
all_data <- do.call(rbind, data_list)
# Построение гистограммы
ggplot(all_data, aes(x = sulfate, fill = file_id)) +
geom_histogram(position = "identity", alpha = 0.4, bins = 50) +
labs(title = "Гистограммы уровней сульфатов для каждого файла", x = "Уровень загрязнения сульфатами", y = "Частота") +
theme_minimal() +
scale_fill_manual(values = rainbow(length(ids)))
#scale_fill_manual(values = c("orange", "yellow", "lightgreen", "lightblue", "lightpink"))
}
plot_histograms(directory, c(3, 5, 9, 11, 13))
